from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
import os
import logging
from environs import Env
import asyncio

from aiogram import flags
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile, KeyboardButton, ReplyKeyboardMarkup
import utils
import message_texts
from states import Gen
import loader


router = Router()
bot = loader.bot

# import env config file
env = Env()
env.read_env()#'../.env', recurse=False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –°—Ç–∞—Ä—Ç
@router.message(Command("start"))
async def start_handler(msg: Message, state: FSMContext):
    """
    Bot actions for start command
    """
    await utils.insert_user(msg.from_user.id, msg.from_user.username)
    conversation = await utils.get_user_conversation(msg.from_user.id)
    input = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –ó–∞–ø—Ä–æ—Å: {input}")
    answer = await utils.get_answer_from_llm(conversation, input)
    logging.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—Ç–≤–µ—Ç –æ—Ç –ò–ò: {answer}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
    await utils.insert_chat(msg.from_user.id, input=input, output=answer)
    is_admin = await utils.is_admin(user_id=msg.from_user.id)
    if is_admin:        
        admin_kb = [[KeyboardButton(text=message_texts.commands['report'], callback_data="get_report")], 
                    [KeyboardButton(text=message_texts.commands['delete_context'], callback_data="delete_context")]]
        admin_kb = ReplyKeyboardMarkup(keyboard=admin_kb, resize_keyboard=True)
            # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await msg.answer(
        answer, reply_markup=admin_kb
    ) 
    else:
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ–±—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer(answer)  
    await state.set_state(Gen.chat_state)  # change State to Chat State
   
    # logging.info(convesations)
    # logging.info(input)
    # logging.info(answer)



# –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
@router.message(F.text == message_texts.commands['report'])
async def get_chats_report(msg: Message):
    is_admin = await utils.is_admin(user_id=msg.from_user.id)
    if is_admin: 
        report_status = await utils.create_chats_report()
        if report_status:
            try:
                if os.path.exists('docs/chat_history.xlsx'):
                    doc_path = 'docs/chat_history.xlsx'
                    await msg.answer_document(FSInputFile(doc_path))
                    logging.info(f"–û—Ç—á—ë—Ç –ø–æ —á–∞—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.chat.id}")
                else:
                    await msg.answer("–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logging.error(e)
        else:
            await msg.answer("–§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω()")
    else:
        await msg.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω –±–æ—Ç–∞.")
        logging.info(f"–û—Ç—á—ë—Ç –ø–æ —á–∞—Ç–∞–º –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.chat.id}. –¢–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω")
        

# –ö–æ–ª–±—ç–∫ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@router.message(F.text == message_texts.commands['delete_context'])
async def delete_context(msg: Message):
    is_admin = await utils.is_admin(user_id=msg.from_user.id)
    if is_admin: 
        trash_context_kb = [[InlineKeyboardButton(text="üöÆ –£–¥–∞–ª–∏—Ç—å —É —Å–µ–±—è", callback_data="delete_self_context")], 
                        [InlineKeyboardButton(text="üöÆ –£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö ‚ùó", callback_data="delete_all_context")]]
        trash_context_kb = InlineKeyboardMarkup(inline_keyboard=trash_context_kb)
            # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await msg.answer("–ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è –∏–ª–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=trash_context_kb)
    else:
        await msg.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω –±–æ—Ç–∞.")
        logging.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ù–ï –æ—á–∏—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.chat.id}. –¢–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω")
    
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.message(F.content_type == 'text' )
async def chat_with_client(msg: Message):
    """
    Bot actions in chat
    """
    if msg.text == env('ADMIN_TOKEN'):
        await utils.make_admin(msg.from_user.id)
        admin_kb = [[KeyboardButton(text=message_texts.commands['report'], callback_data="get_report")], 
                    [KeyboardButton(text=message_texts.commands['delete_context'], callback_data="delete_context")]]
        admin_kb = ReplyKeyboardMarkup(keyboard=admin_kb, resize_keyboard=True)
         # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.", reply_markup=admin_kb)
        return None
    #–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–æ–∏ –µ–≥–æ –Ω–µ—Ç
    await utils.insert_user(msg.from_user.id, msg.from_user.username)
    conversation = await utils.get_user_conversation(msg.chat.id)
    input = msg.text
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –ó–∞–ø—Ä–æ—Å: {input}")
    await bot.send_chat_action(chat_id=msg.chat.id, action="typing")
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –û–ø–µ–Ω–ê–ò
    answer = await utils.get_answer_from_llm(conversation, input)
    logging.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—Ç–≤–µ—Ç –æ—Ç –ò–ò: {answer}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
    await utils.insert_chat(msg.from_user.id, input=input, output=answer)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = await utils.is_admin(user_id=msg.from_user.id)
    if is_admin:        
        admin_kb = [[KeyboardButton(text=message_texts.commands['report'], callback_data="get_report")], 
                    [KeyboardButton(text=message_texts.commands['delete_context'], callback_data="delete_context")]]
        admin_kb = ReplyKeyboardMarkup(keyboard=admin_kb, resize_keyboard=True)
         # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await msg.answer(
        answer, reply_markup=admin_kb
    ) 
    else:
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ–±—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer(answer)  
    
    # logging.info(input)
    # logging.info(answer)
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
@router.message(F.content_type == 'document')
async def load_files(msg : Message, state: FSMContext):
    is_admin = await utils.is_admin(user_id=msg.from_user.id)
    if is_admin:
        if msg.document:
            file_id = msg.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_name = msg.document.file_name
            # Download the file
            file = await bot.download_file(file_path)
            print('Take file:', file_name)
            try:
                if file_name == 'system_prompt.txt':
                    with open(f'docs/system_prompt.txt', 'wb') as new_file:
                        new_file.write(file.read())
                    await asyncio.sleep(1)
                    await msg.reply("–û–±–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—Å—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
                elif file_name == 'sales_scripts.xlsx':
                    with open(f'docs/sales_scripts.xlsx', 'wb') as new_file:
                        new_file.write(file.read())
                    await asyncio.sleep(1) 
                    await msg.reply("–û–±–Ω–æ–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂. –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—Å—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
                else:
                    await msg.reply("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            except:
                await msg.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    else:
        await msg.reply("–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")




    

# –ö–æ–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è –ò–ò —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è
@router.callback_query(F.data == "delete_self_context")
async def delete_self_context(clbck: CallbackQuery, state: FSMContext):
    await utils.delete_self_context(clbck.message.chat.id)
    await clbck.message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ò–ò —É–¥–∞–ª–µ–Ω") 



# –ö–æ–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è –ò–ò —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è
@router.callback_query(F.data == "delete_all_context")
async def delete_self_context(clbck: CallbackQuery, state: FSMContext):
    await utils.delete_all_context(clbck.message.chat.id)
    await clbck.message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è —Å –ò–ò –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω") 
